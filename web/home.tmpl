{{define "pageStyle"}}
    <style>
        body {
            background-color: black;
            background-image: radial-gradient(
                    rgba(0, 150, 0, 0.75), black 120%
            );
            padding: 0;
            display: flex;
            color: white;
            font: 1rem Inconsolata, monospace;
            /*text-shadow: 0 0 5px #C8C8C8;*/
            height:100vh;
        }

        #BitProphet-GoHomePage {
            background: transparent;
            color: white;
            border: 1px solid #000000;
            border-radius: 2px;
            box-shadow: inset 2px 2px 2px rgba(255, 255, 255, .4), inset -2px -2px 2px rgba(0, 0, 0, .4);
            padding-left: 1em;
            padding-right: 1em;
            background: repeating-linear-gradient(
                    33deg,
                    rgba(0, 0, 0, 0.15),
                    rgba(0, 0, 0, 0.15) 1px,
                    transparent 1px,
                    transparent 2px
            );
        }

        #bpTitleBar {

        }

        #debugOut {
            padding: 0;
            height: 20vh;
            background-color: black;
            color: greenyellow;
            background-blend-mode: color-burn;
        }
        textarea{
            resize: none !important;
        }
    </style>
{{end}}

{{template "header" .}}
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
      integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
        integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.20.0-0/axios.js"></script>


<div class="col-12">
    <div class="row p-0 m-0 col-12">
        <div id="BTCTickerBox" class="mr-1 col" style="border: black thin solid; color:white; background-color: black;">
            BTC-USD</br>
            Price <span id="BTCTicker_Price" class="badge badge-light"></span>
            Ask <span id="BTCTicker_BestAsk" class="badge badge-light"></span>
            Bid <span id="BTCTicker_BestBid" class="badge badge-light"></span>
            <div class="col" id="BTChartBox"></div>
        </div>
        <div id="ETHTickerBox" class="mr-1 col" style="border: black thin solid; color:white; background-color: black;">
            ETH-USD</br>
            Price <span id="ETHTicker_Price" class="badge badge-light"></span>
            Ask <span id="ETHTicker_BestAsk" class="badge badge-light"></span>
            Bid <span id="ETHTicker_BestBid" class="badge badge-light"></span>
            <div class="col" id="ETHChartBox"></div>
        </div>
        <div id="LTCTickerBox" class="mr-1 col" style="border: black thin solid; color:white; background-color: black;">
            LTC-USD</br>
            Price <span id="LTCTicker_Price" class="badge badge-light"></span>
            Ask <span id="LTCTicker_BestAsk" class="badge badge-light"></span>
            Bid <span id="LTCTicker_BestBid" class="badge badge-light"></span>
            <div class="col" id="LTCChartBox"></div>
        </div>
    </div>

    <div class="row p-0 m-0 col-12">
        <div id="BitProphet-GoHomePage" class="col-12">
            <div id="bpTitleBar" class="col">
                BitProphet-Go
            </div>
            <textarea id="debugOut" class="col-sm-12 col-md-4" readonly aria-readonly="true"></textarea>
            <div id="systemOrders" class="col-sm-12 col-md-4">
                <table id="systemOrdersTable">
                    <thead>
                        <tr><th>Market</th>
                            <th>Price</th>
                            <th>Size</th>
                            <th>Side</th>
                            <th>Type</th>
                            <th>FillFees</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Settled</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-if="InternalUserOrderStats != null" v-for="o in InternalUserOrderStats">
                            <td></td>
                            <td>o.price</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>



<script>
    let ws = new WebSocket('wss://' + {{.WsHost}} +"/ws");
    // also Coinbase.... Public
    let coinbasePublicWSS = new WebSocket('wss://ws-feed.pro.coinbase.com');
    //
    function dbg(msg) {
        $("#debugOut").text($("#debugOut").text().trim() + "\r\n" + msg);
    }

    // order vue
    let orderV = new Vue({
        el: '#systemOrders',
        data: {
            InternalUserOrderStats: null,
        },
        methods:{

        },
        mounted(){
            axios.get('/stats/user/default',
            ).then((r)=>{
                orderV.InternalUserOrderStats = r.data.Orders;
            }).catch((e)=>{
                console.log(e);
            });
        },
        delimiters: ['[[', ']]'],
    })

    dbg("[BitProphet-Go] Connecting...");
    wsSetup(ws);
    wsCBPublicSetup(coinbasePublicWSS);
    /////////
    // Charts
    const BTCChart = Highcharts.chart('BTChartBox', {
        chart: {
            type: 'spline',
            height: 150,
            animation: Highcharts.svg, // don't animate in old IE
            marginRight: 0,
        },
        plotOptions: {
            series: {
                color: '#FF0000'
            }
        },
        time: {
            useUTC: false
        },
        title: {
            text: 'BTC-USD'
        },
        credits: {
            enabled: false
        },
        xAxis: {
            type: 'datetime',
            minTickInterval: 10,
        },
        yAxis: {
            title: {
                text: '$'
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#888'
            }]
        },
        tooltip: {
            headerFormat: '<b>{series.name}</b><br/>',
            pointFormat: '{point.x:%Y-%m-%d %H:%M:%S}<br/>{point.y:.2f}'
        },
        legend: {
            enabled: false
        },
        exporting: {
            enabled: false
        },
        series: [{
            name: 'BTC-USD',
            data: null,
        }]
    });

    const LTCChart = Highcharts.chart('LTCChartBox', {
        chart: {
            type: 'spline',
            height: 150,
            animation: Highcharts.svg, // don't animate in old IE
            marginRight: 0,
        },
        plotOptions: {
            series: {
                color: '#ff0000'
            }
        },
        time: {
            useUTC: false
        },
        title: {
            text: 'LTC-USD'
        },
        credits: {
            enabled: false
        },
        xAxis: {
            type: 'datetime',
            minTickInterval: 10,
        },
        yAxis: {
            title: {
                text: '$'
            },
            plotLines: [{
                value: 1,
                width: 1,
                color: '#888'
            }]
        },
        tooltip: {
            headerFormat: '<b>{series.name}</b><br/>',
            pointFormat: '{point.x:%Y-%m-%d %H:%M:%S}<br/>{point.y:.2f}'
        },
        legend: {
            enabled: false
        },
        exporting: {
            enabled: false
        },
        series: [{
            name: 'LTC-USD',
            data: null,
        }]
    });

    const ETHChart = Highcharts.chart('ETHChartBox', {
        chart: {
            type: 'spline',
            height: 150,
            animation: Highcharts.svg, // don't animate in old IE
            marginRight: 0,
        },
        plotOptions: {
            series: {
                color: '#FF0000'
            }
        },
        time: {
            useUTC: false
        },
        title: {
            text: 'ETH-USD'
        },
        credits: {
            enabled: false
        },
        xAxis: {
            type: 'datetime',
            minTickInterval: 10,
        },
        yAxis: {
            title: {
                text: '$'
            },
            plotLines: [{
                value: 1,
                width: 1,
                color: '#888'
            }]
        },
        tooltip: {
            headerFormat: '<b>{series.name}</b><br/>',
            pointFormat: '{point.x:%Y-%m-%d %H:%M:%S}<br/>{point.y:.2f}'
        },
        legend: {
            enabled: false
        },
        exporting: {
            enabled: false
        },
        series: [{
            name: 'ETH-USD',
            data: null,
        }]
    });



    /////////////////////////
    function wsSetup(sock) {
        // Websocket Setup
        sock.addEventListener('open', function (event) {
            dbg("Connected to geekprojex.com");
        });
        sock.addEventListener('message', function (event) {
            dbg('Message from server ' + event.data.trim());
            $('#debugOut').scrollTop($('#debugOut')[0].scrollHeight);
        });
        sock.addEventListener('ping', function (event) {
            dbg('Ping from server: ' + event.data);
            $('#debugOut').scrollTop($('#debugOut')[0].scrollHeight);
        });
        sock.addEventListener('close', function (event) {
            dbg('Disconnected from server ' + event);
        });
        sock.addEventListener('error', function (event) {
            dbg('Error from server ' + event);
        });
        $("#wsCommInput").on("keypress", function (e) {
            if (e.which === 13) {
                sock.send($("#wsCommInput").val());
                $("#wsCommInput").val("");
            }
        })
    }

    function wsCBPublicSetup(sock) {
        // Websocket Setup
        sock.addEventListener('open', function (event) {
            dbg("Connected To Coinbase.com Pro Feed");
            // subscribe our three primary tickers
            sock.send(JSON.stringify({
                "type": "subscribe",
                "product_ids": [ "BTC-USD","ETH-USD","LTC-USD"],
                "channels": [
                    {
                        "name": "ticker",
                        "product_ids": [ "BTC-USD","ETH-USD","LTC-USD" ]
                    }
                ]
            }));
        });
        sock.addEventListener('message', function (event) {
            // dbg('Message from server ' + event.data.trim());
            try {
                let obj = JSON.parse(event.data);
                // Tickers...
                if (obj.type === "ticker" && obj.product_id === "BTC-USD") {
                    $("#BTCTicker_Price").html(obj.price);
                    $("#BTCTicker_BestAsk").html(obj.best_ask);
                    $("#BTCTicker_BestBid").html(obj.best_bid);
                    let shifter = false;
                    if (BTCChart.pointCount > 75) { shifter = true; }
                    BTCChart.series[0].addPoint([(new Date()).getTime(),parseFloat(obj.price)], true, shifter,!shifter);
                } else if (obj.type === "ticker" && obj.product_id === "ETH-USD") {
                    $("#ETHTicker_Price").html(obj.price);
                    $("#ETHTicker_BestAsk").html(obj.best_ask);
                    $("#ETHTicker_BestBid").html(obj.best_bid);
                    let shifter = false;
                    if (ETHChart.pointCount > 75) { shifter = true; }
                    ETHChart.series[0].addPoint([(new Date()).getTime(),parseFloat(obj.price)], true, shifter,!shifter);
                } else if (obj.type === "ticker" && obj.product_id === "LTC-USD") {
                    $("#LTCTicker_Price").html(obj.price);
                    $("#LTCTicker_BestAsk").html(obj.best_ask);
                    $("#LTCTicker_BestBid").html(obj.best_bid);
                    let shifter = false;
                    if (LTCChart.pointCount > 75) { shifter = true; }
                    LTCChart.series[0].addPoint([(new Date()).getTime(),parseFloat(obj.price)], true, shifter,!shifter);
                }
            } catch (error) {
                console.log(error);
            }
            // $('#debugOut').scrollTop($('#debugOut')[0].scrollHeight);
        });
        // sock.addEventListener('ping', function (event) {
        //     dbg('Ping from server: ' + event.data);
        //     $('#debugOut').scrollTop($('#debugOut')[0].scrollHeight);
        // });
        sock.addEventListener('close', function (event) {
            dbg('Disconnected from server ' + event);
            console.log(event);
        });
        sock.addEventListener('error', function (event) {
            dbg('Error from server ' + event);
            console.log(event);
        });
        // $("#wsCommInput").on("keypress", function (e) {
        //     if (e.which === 13) {
        //         sock.send($("#wsCommInput").val());
        //         $("#wsCommInput").val("");
        //     }
        // })
    }




</script>